import asyncio
import logging
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, FSInputFile, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import yadisk

from database import session, User, FileTemplate, LogSettings, init_db

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
yadisk_client = yadisk.YaDisk(token=os.getenv("YADISK_TOKEN"))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_fullname = State()

class UploadStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_file_type = State()
    
class AdminStates(StatesGroup):
    waiting_for_admin_action = State()
    waiting_for_template = State()
    waiting_for_log_chat_id = State()
    waiting_for_user_management = State()
    waiting_for_user_id = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ —á–∞—Ç
async def send_log_message(message_text):
    log_settings = session.query(LogSettings).first()
    if log_settings and log_settings.log_chat_id:
        try:
            await bot.send_message(chat_id=log_settings.log_chat_id, text=message_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ —á–∞—Ç: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu(is_admin=False):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="menu:upload")
    if is_admin:
        builder.button(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu:admin")
    builder.adjust(1)
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin:users")
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–∞ —Ñ–∞–π–ª–æ–≤", callback_data="admin:template")
    builder.button(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="admin:logging")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="menu:back")
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    if user:
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.full_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", 
            reply_markup=get_main_menu(user.is_admin)
        )
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û.")
        await state.set_state(RegistrationStates.waiting_for_fullname)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(RegistrationStates.waiting_for_fullname)
async def process_fullname(message: Message, state: FSMContext):
    full_name = message.text.strip()
    
    if len(full_name.split()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è).")
        return
    
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    new_user = User(telegram_id=user_id, full_name=full_name)
    session.add(new_user)
    session.commit()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    folder_path = f"/FilesSendBot/{full_name}"
    try:
        if not yadisk_client.exists(folder_path):
            yadisk_client.mkdir(folder_path)
        await message.answer(
            f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–∞—à–µ –§–ò–û: {full_name}", 
            reply_markup=get_main_menu(new_user.is_admin)
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        log_settings = session.query(LogSettings).first()
        if log_settings and log_settings.log_registrations:
            await send_log_message(f"üÜï –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {full_name} (ID: {user_id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
@router.callback_query(F.data.startswith("menu:"))
async def process_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    if action == "upload":
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—ç—Å—Å–µ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é).")
        await state.set_state(UploadStates.waiting_for_file)
    elif action == "admin" and user and user.is_admin:
        await callback.message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_menu())
        await state.set_state(AdminStates.waiting_for_admin_action)
    elif action == "back":
        await callback.message.answer(
            f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", 
            reply_markup=get_main_menu(user and user.is_admin)
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /upload
@router.message(Command("upload"))
async def cmd_upload(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (—ç—Å—Å–µ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é).")
    await state.set_state(UploadStates.waiting_for_file)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@router.message(UploadStates.waiting_for_file, F.document)
async def process_file(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(file_id=message.document.file_id, file_name=message.document.file_name)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="–≠—Å—Å–µ", callback_data="file_type:essay")
    builder.button(text="–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", callback_data="file_type:presentation")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–∞:", reply_markup=builder.as_markup())
    await state.set_state(UploadStates.waiting_for_file_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
@router.callback_query(UploadStates.waiting_for_file_type, F.data.startswith("file_type:"))
async def process_file_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    file_type = callback.data.split(":")[1]  # essay –∏–ª–∏ presentation
    user_id = callback.from_user.id
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    file_id = data["file_id"]
    original_file_name = data["file_name"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    _, file_ext = os.path.splitext(original_file_name)
    
    # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    template = session.query(FileTemplate).first()
    if not template:
        template = FileTemplate()
        session.add(template)
        session.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ —à–∞–±–ª–æ–Ω—É
    current_date = datetime.now().strftime("%Y-%m-%d")
    file_type_name = "–≠—Å—Å–µ" if file_type == "essay" else "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –§–ò–û –Ω–∞ —á–∞—Å—Ç–∏
    name_parts = user.full_name.split()
    surname = name_parts[0] if name_parts else ""
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —à–∞–±–ª–æ–Ω–µ
    new_file_name = template.template
    new_file_name = new_file_name.replace("[—Ñ–∞–º–∏–ª–∏—è]", surname)
    new_file_name = new_file_name.replace("[—Ç–∏–ø]", file_type_name)
    new_file_name = f"{new_file_name}{file_ext}"
    
    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
    yadisk_path = f"/FilesSendBot/{user.full_name}/{new_file_name}"
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_path = file.file_path
    download_path = f"temp_{file_id}{file_ext}"
    await bot.download_file(file_path, download_path)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        yadisk_client.upload(download_path, yadisk_path)
        
        await callback.message.answer(
            f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∫–∞–∫ {new_file_name}",
            reply_markup=get_main_menu(user.is_admin)
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
        log_settings = session.query(LogSettings).first()
        if log_settings and log_settings.log_file_uploads:
            await send_log_message(
                f"üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {user.full_name} (ID: {user_id})\n"
                f"–¢–∏–ø: {file_type_name}\n"
                f"–ò–º—è —Ñ–∞–π–ª–∞: {new_file_name}"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(download_path):
            os.remove(download_path)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
@router.message(UploadStates.waiting_for_file)
async def wrong_file(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(AdminStates.waiting_for_admin_action, F.data.startswith("admin:"))
async def process_admin_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    if not user or not user.is_admin:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    if action == "users":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = session.query(User).all()
        user_list = "\n".join([f"{u.id}. {u.full_name} (ID: {u.telegram_id}, –ê–¥–º–∏–Ω: {'–î–∞' if u.is_admin else '–ù–µ—Ç'})" for u in users])
        
        builder = InlineKeyboardBuilder()
        builder.button(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="user_action:make_admin")
        builder.button(text="–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="user_action:remove_admin")
        builder.button(text="–ù–∞–∑–∞–¥", callback_data="admin:back")
        builder.adjust(1)
        
        await callback.message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}", reply_markup=builder.as_markup())
        await state.set_state(AdminStates.waiting_for_user_management)
    
    elif action == "template":
        template = session.query(FileTemplate).first()
        if not template:
            template = FileTemplate()
            session.add(template)
            session.commit()
        
        await callback.message.answer(
            f"–¢–µ–∫—É—â–∏–π —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {template.template}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã:\n"
            f"[—Ñ–∞–º–∏–ª–∏—è] - —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            f"[—Ç–∏–ø] - —Ç–∏–ø —Ñ–∞–π–ª–∞ (–≠—Å—Å–µ/–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è)\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω:"
        )
        await state.set_state(AdminStates.waiting_for_template)
    
    elif action == "logging":
        log_settings = session.query(LogSettings).first()
        if not log_settings:
            log_settings = LogSettings()
            session.add(log_settings)
            session.commit()
        
        builder = InlineKeyboardBuilder()
        builder.button(
            text=f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {'–í–∫–ª' if log_settings.log_registrations else '–í—ã–∫–ª'}", 
            callback_data="log_action:toggle_reg"
        )
        builder.button(
            text=f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ–∫: {'–í–∫–ª' if log_settings.log_file_uploads else '–í—ã–∫–ª'}", 
            callback_data="log_action:toggle_upload"
        )
        builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å ID —á–∞—Ç–∞", callback_data="log_action:set_chat")
        builder.button(text="–ù–∞–∑–∞–¥", callback_data="admin:back")
        builder.adjust(1)
        
        await callback.message.answer(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            f"ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤: {log_settings.log_chat_id or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}",
            reply_markup=builder.as_markup()
        )
    
    elif action == "back":
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(True))
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∞–±–ª–æ–Ω–∞
@router.message(AdminStates.waiting_for_template)
async def process_template(message: Message, state: FSMContext):
    new_template = message.text.strip()
    
    if not new_template:
        await message.answer("–®–∞–±–ª–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Å–Ω–æ–≤–∞:")
        return
    
    template = session.query(FileTemplate).first()
    if not template:
        template = FileTemplate(template=new_template)
        session.add(template)
    else:
        template.template = new_template
    
    session.commit()
    
    await message.answer(
        f"–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_template}", 
        reply_markup=get_admin_menu()
    )
    await state.set_state(AdminStates.waiting_for_admin_action)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("log_action:"))
async def process_log_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]
    
    log_settings = session.query(LogSettings).first()
    if not log_settings:
        log_settings = LogSettings()
        session.add(log_settings)
        session.commit()
    
    if action == "toggle_reg":
        log_settings.log_registrations = not log_settings.log_registrations
        session.commit()
        await process_admin_action(callback, state)
    
    elif action == "toggle_upload":
        log_settings.log_file_uploads = not log_settings.log_file_uploads
        session.commit()
        await process_admin_action(callback, state)
    
    elif action == "set_chat":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ 'clear' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
        )
        await state.set_state(AdminStates.waiting_for_log_chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
@router.message(AdminStates.waiting_for_log_chat_id)
async def process_log_chat_id(message: Message, state: FSMContext):
    chat_id = message.text.strip()
    
    log_settings = session.query(LogSettings).first()
    if not log_settings:
        log_settings = LogSettings()
        session.add(log_settings)
    
    if chat_id.lower() == "clear":
        log_settings.log_chat_id = None
        session.commit()
        await message.answer("ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ —É–¥–∞–ª–µ–Ω.", reply_markup=get_admin_menu())
    else:
        log_settings.log_chat_id = chat_id
        session.commit()
        await message.answer(f"ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {chat_id}", reply_markup=get_admin_menu())
    
    await state.set_state(AdminStates.waiting_for_admin_action)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.callback_query(AdminStates.waiting_for_user_management, F.data.startswith("user_action:"))
async def process_user_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data.split(":")[1]
    
    await state.update_data(user_action=action)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(AdminStates.waiting_for_user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID:")
        return
    
    data = await state.get_data()
    action = data.get("user_action")
    
    user = session.query(User).filter(User.telegram_id == user_id).first()
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    if action == "make_admin":
        user.is_admin = True
        session.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=get_admin_menu())
    elif action == "remove_admin":
        user.is_admin = False
        session.commit()
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", reply_markup=get_admin_menu())
    
    await state.set_state(AdminStates.waiting_for_admin_action)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(Command("makeadmin"))
async def cmd_make_admin(message: Message):
    user_id = message.from_user.id
    user = session.query(User).filter(User.telegram_id == user_id).first()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
    admin_exists = session.query(User).filter(User.is_admin == True).first()
    
    if not admin_exists:
        if user:
            user.is_admin = True
            session.commit()
            await message.answer("–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã.")
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã—Ö.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    log_settings = session.query(LogSettings).first()
    if not log_settings:
        log_settings = LogSettings()
        session.add(log_settings)
    
    # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    template = session.query(FileTemplate).first()
    if not template:
        template = FileTemplate()
        session.add(template)
    
    session.commit()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())